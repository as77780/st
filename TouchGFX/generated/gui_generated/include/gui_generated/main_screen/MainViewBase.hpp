/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/widgets/RepeatButton.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/containers/progress_indicators/LineProgress.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Image.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void FunVolUP()
    {
        // Override and implement this function in Main
    }

    virtual void FunVolDown()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::TiledImage tiledImage1;
    touchgfx::BoxWithBorder boxWithBorder1_1;
    touchgfx::BoxWithBorder boxWithBorder3;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::BoxWithBorder boxWithBorder2;
    touchgfx::RepeatButton ButVolUP;
    touchgfx::RepeatButton ButVolDown;
    touchgfx::BoxWithBorder boxWithBorder1;
    touchgfx::TextAreaWithOneWildcard textVolume;
    touchgfx::CircleProgress circleProgress2;
    touchgfx::PainterRGB888 circleProgress2Painter;
    touchgfx::CircleProgress circleProgress2_1;
    touchgfx::PainterRGB888 circleProgress2_1Painter;
    touchgfx::LineProgress lineProgress1;
    touchgfx::PainterRGB888 lineProgress1Painter;
    touchgfx::LineProgress lineProgress1_1;
    touchgfx::PainterRGB888 lineProgress1_1Painter;
    touchgfx::Line line1;
    touchgfx::PainterRGB888 line1Painter;
    touchgfx::BoxWithBorder boxWithBorder1_1_1;
    touchgfx::Line line1_1_1_1;
    touchgfx::PainterRGB888 line1_1_1_1Painter;
    touchgfx::ButtonWithIcon buttonPlay;
    touchgfx::TextAreaWithOneWildcard textTempPower;
    touchgfx::TextAreaWithOneWildcard textTempSound;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea textArea1_1;
    touchgfx::Image image1;
    touchgfx::ButtonWithIcon buttonPowOff;
    touchgfx::ButtonWithIcon buttonInput;
    touchgfx::ButtonWithIcon buttonEqual;
    touchgfx::ButtonWithIcon buttonPlayer;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTVOLUME_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textVolumeBuffer[TEXTVOLUME_SIZE];
    static const uint16_t TEXTTEMPPOWER_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textTempPowerBuffer[TEXTTEMPPOWER_SIZE];
    static const uint16_t TEXTTEMPSOUND_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textTempSoundBuffer[TEXTTEMPSOUND_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // MAINVIEWBASE_HPP
